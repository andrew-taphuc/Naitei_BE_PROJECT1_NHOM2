const express = require("express");
const cors = require("cors");
const http = require("http"); // TH√äM D√íNG N√ÄY ƒë·ªÉ t·∫°o server chu·∫©n
const { Server } = require("socket.io");
const {
  connectDB,
  setupConnectionListeners,
} = require("./src/config/database");
require("dotenv").config();
const apiRoutes = require("./src/routes/api");

const app = express();
const PORT = process.env.PORT || 3001;

// T·∫°o HTTP server t·ª´ Express
const server = http.createServer(app);

// T·∫°o socket.io instance sau khi c√≥ server
const io = new Server(server, {
  cors: {
    origin: "*", // N·∫øu c√≥ frontend c·ª• th·ªÉ th√¨ thay * b·∫±ng domain
    methods: ["GET", "POST"],
  },
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// K·∫øt n·ªëi MongoDB v√† thi·∫øt l·∫≠p event listeners
connectDB();
setupConnectionListeners();

// API Routes
app.use(apiRoutes);

// Socket setup
require("./src/utils/socket")(io);

// Kh·ªüi ƒë·ªông server
server.listen(PORT, (err) => {
  if (err) {
    console.error("‚ùå L·ªói khi kh·ªüi ƒë·ªông server:", err);
    process.exit(1);
  }
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});

server.on("error", (error) => {
  console.error("‚ùå Server g·∫∑p l·ªói:", error);
  process.exit(1);
});
